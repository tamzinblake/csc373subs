1
00:00:00,000 --> 00:00:03,000
So, here's my implementation of the resampling step.

2
00:00:03,000 --> 00:00:06,000
And it follows the same logic that I gave you in the diagram.

3
00:00:06,000 --> 00:00:11,000
We're creating a new set of particles called p3; it's an empty set in the beginning,

4
00:00:11,000 --> 00:00:15,000
and inside this routine, every time I resample,

5
00:00:15,000 --> 00:00:21,000
I add a particle from the previous particle set with the index: index.

6
00:00:21,000 --> 00:00:26,000
So, that's the main loop over here, and at the end I assign p3 back to p.

7
00:00:26,000 --> 00:00:28,000
So, that's the resampling step.

8
00:00:28,000 --> 00:00:31,000
My very first index is drawn at random.

9
00:00:31,000 --> 00:00:34,000
This is a uniform random sampler of all the indices,

10
00:00:34,000 --> 00:00:38,000
and then I had this running variable beta that I set to 0.0,

11
00:00:38,000 --> 00:00:43,000
and I cache away the max of w just to be slightly faster.

12
00:00:43,000 --> 00:00:46,000
You don't have to do this; they come in over here.

13
00:00:46,000 --> 00:00:48,000
Doesn't really matter you could have max over here.

14
00:00:48,000 --> 00:00:51,000
But then I go and produce exactly N particles, and the way I do this

15
00:00:51,000 --> 00:00:55,000
I add to beta a uniform random that is twice as large

16
00:00:55,000 --> 00:01:00,000
and maximum in the range as my max weight w.

17
00:01:00,000 --> 00:01:03,000
Now, 2 times max weight w will be a very large step,

18
00:01:03,000 --> 00:01:06,000
but by adding a random variable that sits between 0 and 1,

19
00:01:06,000 --> 00:01:11,000
I have uniformity in 0 and 2 times mw,

20
00:01:11,000 --> 00:01:16,000
and then while this beta variable is larger than the weight of the current index,

21
00:01:16,000 --> 00:01:19,000
I subtract this weight from my beta value

22
00:01:19,000 --> 00:01:23,000
and I increment index by 1 % N,

23
00:01:23,000 --> 00:01:27,000
the total number of particles, and when it's smaller I'm done.

24
00:01:27,000 --> 00:01:32,000
I can just take that particle, add it, append it, and repeat.

25
00:01:32,000 --> 00:01:35,000
So, this entire procedure over here is somewhat involved

26
00:01:35,000 --> 00:01:38,000
if you got that right I'm impressed.

27
00:01:38,000 --> 00:01:40,000
I hope you learn something from doing it.

28
00:01:40,000 --> 00:01:43,000
It happens to be really easy to program once you know what to do,

29
00:01:43,000 --> 00:01:46,000
and every time we write a particle filter you can just reuse it.

30
00:01:46,000 --> 00:01:49,000
You never have to think about it again because there's nothing

31
00:01:49,000 --> 00:01:52,000
domain specific in this specific procedure over here.

32
00:01:52,000 --> 00:01:56,000
So, let's run it; if I run it nothing happens to that empty set.

33
00:01:56,000 --> 00:02:00,000
So, let me print out the resulting set of particles.

34
00:02:00,000 --> 00:02:02,000
So, now I have a print p over here.

35
00:02:02,000 --> 00:02:06,000
Let me run it, and of course, I'm going to get 1000 particles, right?

36
00:02:06,000 --> 00:02:10,000
A lot of particles but let's look through them.

37
00:02:10,000 --> 00:02:14,000
If you just look at the first value over here, they are all about the same.

38
00:02:14,000 --> 00:02:18,000
They are all between 76 and 82.

39
00:02:18,000 --> 00:02:26,000
The second one, they're all about 42, 44, 43, 41, 39, 38.

40
00:02:26,000 --> 00:02:29,000
So, what you've gotten here is a set of particles

41
00:02:29,000 --> 00:02:31,000
that are all co-located.

42
00:02:31,000 --> 00:02:34,000
So, instead of having a complete random set of particles, like we had before,

43
00:02:34,000 --> 00:02:38,000
the resampling step, we can see this,  already gives me particles

44
00:02:38,000 --> 00:02:40,000
of very similar X and Y positions.

45
00:02:40,000 --> 00:02:43,000
Now it turns out the orientations are not very similar.

46
00:02:43,000 --> 00:02:46,000
They jump like crazy, and the reason is,

47
00:02:46,000 --> 00:02:52,000
well, if you think about it, we only have 1 location so far,

48
00:02:52,000 --> 00:02:57,000
our distances to landmarks are independent of the orientation.

49
00:02:57,000 --> 00:03:02,000
So as a result orientation plays no role in the projected measurement,

50
00:03:02,000 --> 00:03:04,000
and therefore has no role in the selection.

51
00:03:04,000 --> 00:03:06,000
Let me make the point, again; here's our 4 landmarks,

52
00:03:06,000 --> 00:03:08,000
and we measure the distances to those.

53
00:03:08,000 --> 00:03:12,000
A robot facing this direction has a certain set of distances.

54
00:03:12,000 --> 00:03:16,000
A robot facing a different direction, like this one,

55
00:03:16,000 --> 00:03:19,000
has the exact same set of distances.

56
00:03:19,000 --> 00:03:22,000
Therefore, in our particle future, the heading direction plays no role.

