1
00:00:00,000 --> 00:00:02,000
What I'll do next is to give you

2
00:00:02,000 --> 00:00:04,000
another programming assignment.

3
00:00:04,000 --> 00:00:07,000
Rather than printing out the particles themselves,

4
00:00:07,000 --> 00:00:09,000
I want you to print out the overall

5
00:00:09,000 --> 00:00:11,000
quality of the solution

6
00:00:11,000 --> 00:00:13,000
and to do this, I've programmed for you an "eval" code

7
00:00:13,000 --> 00:00:15,000
which takes in as a robot position

8
00:00:15,000 --> 00:00:17,000
and a particle set,

9
00:00:17,000 --> 00:00:19,000
and it computes the average error

10
00:00:19,000 --> 00:00:21,000
of each particle, relative to the robot pos

11
00:00:21,000 --> 00:00:24,000
in "x" and "y", not in the orientation.

12
00:00:24,000 --> 00:00:26,000
And the way it does it, it basically compares

13
00:00:26,000 --> 00:00:29,000
the "x" of the particle with the "x" of the robot,

14
00:00:29,000 --> 00:00:32,000
computes the Euclidian distance

15
00:00:32,000 --> 00:00:35,000
of these differences, and averages all of those.

16
00:00:35,000 --> 00:00:37,000
So it sums them all up

17
00:00:37,000 --> 00:00:39,000
and it averages them, through the

18
00:00:39,000 --> 00:00:42,000
number of particles over here, which is upper caps M.

19
00:00:42,000 --> 00:00:44,000
Now, there's some funny stuff over here.

20
00:00:44,000 --> 00:00:47,000
The reason is, the world is cyclic

21
00:00:47,000 --> 00:00:51,000
and it might be that the robot is at 0.0 or at 99.9.

22
00:00:51,000 --> 00:00:53,000
It's about the same values

23
00:00:53,000 --> 00:00:55,000
but, according to this calculation over here, they'd be different.

24
00:00:55,000 --> 00:00:58,000
So while there's normalization over here,

25
00:00:58,000 --> 00:01:01,000
I make sure that the cyclicity of the world

26
00:01:01,000 --> 00:01:03,000
doesn't really affect negatively

27
00:01:03,000 --> 00:01:05,000
the estimated error I've enclosed in the boundary.

28
00:01:05,000 --> 00:01:07,000
You might parse this.

29
00:01:07,000 --> 00:01:10,000
I'm adding "world_size" over to

30
00:01:10,000 --> 00:01:12,000
then compute a modulo operation and then

31
00:01:12,000 --> 00:01:14,000
subtract the same thing over here, I can't even see it.

32
00:01:14,000 --> 00:01:16,000
It's just too long a line.

33
00:01:16,000 --> 00:01:18,000
Be that as it is, I want you to take the function, "eval",

34
00:01:18,000 --> 00:01:23,000
and produce a sequence of performance evaluations.

35
00:01:23,000 --> 00:01:25,000
And when you hit the run button,

36
00:01:25,000 --> 00:01:27,000
I want you to produce something like this stuff over here:

37
00:01:27,000 --> 00:01:32,000
4.9, 3.6, 2.9, 2.8, 3.1.

38
00:01:32,000 --> 00:01:34,000
This is the residual error.

39
00:01:34,000 --> 00:01:36,000
Remember, it's a world of size 100 by 100,

40
00:01:36,000 --> 00:01:38,000
so this is actually a relatively small error,

41
00:01:38,000 --> 00:01:40,000
compared to the world's size.

42
00:01:40,000 --> 00:01:42,000
Can you code it so I get, for each iteration,

43
00:01:42,000 --> 00:01:47,000
the error number produced by this routine over here?

