1
00:00:00,000 --> 00:00:02,000
So here's our programming assignment.

2
00:00:02,000 --> 00:00:07,000
In class you already programmed a particle filter for a really simplistic robot

3
00:00:07,000 --> 00:00:14,000
that was able to measure ranges to landmarks and moved pretty much like a trashbin.

4
00:00:14,000 --> 00:00:17,000
Now I'd like to replace it with a more interesting robot that's more realistic.

5
00:00:17,000 --> 00:00:22,000
In particular, I'd like you to use a car. So here's a car.

6
00:00:22,000 --> 00:00:29,000
A car tends to have 2 fixed tires and 2 steerable tires in the front.

7
00:00:29,000 --> 00:00:33,000
Suppose the location of our car in a coordinate system

8
00:00:33,000 --> 00:00:36,000
is given by its x-coordinate and its y-coordinate, and

9
00:00:36,000 --> 00:00:40,000
I'm picking the halfway point on the rear axle as the reference point,

10
00:00:40,000 --> 00:00:44,000
and by its heading direction theta.

11
00:00:44,000 --> 00:00:47,000
So the state will be x, y, and the orientation theta.

12
00:00:47,000 --> 00:00:52,000
Then this car also has a steering angle that is called the alpha.

13
00:00:52,000 --> 00:00:57,000
The question is how is the state affected by driving a certain distance d

14
00:00:57,000 --> 00:01:02,000
with a fixed steering angle, assuming the initial state is x, y, and theta.

15
00:01:02,000 --> 00:01:05,000
It turns out to answer this, I also need to know the length of the vehicle,

16
00:01:05,000 --> 00:01:12,000
which I will just call L for length that is a constant throughout our consideration.

17
00:01:12,000 --> 00:01:14,000
This is usually called a "bicycle model".

18
00:01:14,000 --> 00:01:18,000
Obviously, it suffices to look at one pair of tires because the other one,

19
00:01:18,000 --> 00:01:23,000
at least in approximation, runs pretty much parallel.

20
00:01:23,000 --> 00:01:28,000
So if we look at the robot locally where we have a steering angle, alpha,

21
00:01:28,000 --> 00:01:33,000
robot length L, and we're driving the rear tire forward by distance D,

22
00:01:33,000 --> 00:01:39,000
then the robot will turn to the left, and its turning angle, beta, is proportional

23
00:01:39,000 --> 00:01:45,000
to the distance that the rear tire moves forward divided by the length of the vehicle

24
00:01:45,000 --> 00:01:48,000
times the tangent of the steering angle.

25
00:01:48,000 --> 00:01:53,000
Now compute the changes of x, y, and theta in the local coordinate system.

26
00:01:53,000 --> 00:01:56,000
Realize the turning radius R of this robot,

27
00:01:56,000 --> 00:02:00,000
is simply the distance that we drive forward divided by beta.

28
00:02:00,000 --> 00:02:03,000
So it's relatively simple math, which I don't want to explain in detail.

29
00:02:03,000 --> 00:02:09,000
This means that the robot is turning around a point over here, call it cx and cy.

30
00:02:09,000 --> 00:02:12,000
After the turn, the vehicle is located somewhere over here.

31
00:02:12,000 --> 00:02:15,000
In global coordinates, here is the way we describe this.

32
00:02:15,000 --> 00:02:19,000
cx is the x coordinate of the robot x minus, now we go to the left,

33
00:02:19,000 --> 00:02:25,000
the sine of the robot orientation before motion times radius R.

34
00:02:25,000 --> 00:02:33,000
Similarly, cy is this expression over here, y plus cosine of the orientation times R.

35
00:02:33,000 --> 00:02:38,000
Then after motion, we can go back from cx to cy to a new state over here

36
00:02:38,000 --> 00:02:42,000
simply by adding in the turning radius beta.

37
00:02:42,000 --> 00:02:49,000
That is, our new x is cx plus sine of theta plus beta times radius.

38
00:02:49,000 --> 00:02:54,000
Notice how this parallels this guy over here, except for two changes.

39
00:02:54,000 --> 00:02:56,000
What we previously subtracted we're now adding,

40
00:02:56,000 --> 00:03:01,000
and we're adding beta to the argument of the sine.

41
00:03:01,000 --> 00:03:07,000
The same with y, and the orientation is just increased by beta, modulo 2π.

42
00:03:07,000 --> 00:03:10,000
This all works if the robot is actually turning.

43
00:03:10,000 --> 00:03:16,000
If the robot were to go straight, then R would become infinity by this division over here.

44
00:03:16,000 --> 00:03:25,000
So for small betas, in my code that's smaller than 0.001, we can approximate this all as straight motion.

45
00:03:25,000 --> 00:03:32,000
Our new x is the old x times our driven distance pointed in the cosine of the heading direction.

46
00:03:32,000 --> 00:03:37,000
Similarly for y we go in sine of heading direction, and the heading direction stays the same.

47
00:03:37,000 --> 00:03:41,000
You could add beta, which is basically zero, to be slightly more precise

48
00:03:41,000 --> 00:03:44,000
or you could just use theta. It doesn't really matter.

49
00:03:44,000 --> 00:03:47,000
So in this programming assignment, I'd like you to implement this piece

50
00:03:47,000 --> 00:03:50,000
of math over here in our particle filter.

51
00:03:50,000 --> 00:03:57,000
And to make sure you implemented it correctly, I will give you some example data that you can check.

52
00:03:57,000 --> 00:04:00,000
So in our first part, I've prepared a lot of software for you,

53
00:04:00,000 --> 00:04:04,000
basically copying the old particle filter software over,

54
00:04:04,000 --> 00:04:08,000
and removing the motion and the measurement model for now.

55
00:04:08,000 --> 00:04:10,000
And in this I just want you to practice the motion model.

56
00:04:10,000 --> 00:04:13,000
So we assume a length of the robot of 20.

57
00:04:13,000 --> 00:04:15,000
We initialize the robot with this length parameter,

58
00:04:15,000 --> 00:04:19,000
and for this first iteration we assume no steering noise and no distance noise.

59
00:04:19,000 --> 00:04:22,000
I set the robot to (0.0, 0.0, 0.0) in the beginning,

60
00:04:22,000 --> 00:04:26,000
and then I cache away a number of motions,

61
00:04:26,000 --> 00:04:32,000
And the way to read those is this robot is moving by 10 total with the steering angle of zero.

62
00:04:32,000 --> 00:04:37,000
Then it moves another 10 with a steering angle of pi divided by 6.

63
00:04:37,000 --> 00:04:41,000
And then it moves 20 again with a steering angle of zero.

64
00:04:41,000 --> 00:04:44,000
A pi over 6 is a left steering,

65
00:04:44,000 --> 00:04:47,000
so the robot should change its coordinates in the beginning just in the x direction,

66
00:04:47,000 --> 00:04:50,000
because it's facing an x direction over here.

67
00:04:50,000 --> 00:04:54,000
Then turn left a little bit, go forward, and go straight again.

68
00:04:54,000 --> 00:04:58,000
Scrolling down a little bit, I also give you the code to run the robot.

69
00:04:58,000 --> 00:05:01,000
We've created the robot here. You print the initial coordinate.

70
00:05:01,000 --> 00:05:05,000
And then for each of the motions in this list over here,

71
00:05:05,000 --> 00:05:09,000
we apply the myrobot equals myrobot.move command,

72
00:05:09,000 --> 00:05:11,000
and we print out the successive command.

73
00:05:11,000 --> 00:05:15,000
So if you get this right, these are the numbers I would like to see.

74
00:05:15,000 --> 00:05:18,000
Initially, the robot position is 0, 0, 0. That's just the one over here.

75
00:05:18,000 --> 00:05:22,000
It's out first print command. It then moves forward in the x direction by 10.

76
00:05:22,000 --> 00:05:26,000
The orientation stays 0 and so does y, because there's no steering.

77
00:05:26,000 --> 00:05:32,000
And now we steer. This affects x. It doesn't quite move 10. It only moves 9.86.

78
00:05:32,000 --> 00:05:39,000
In the y direction it only moves 1.433, and its new orientation is 0.2886.

79
00:05:39,000 --> 00:05:44,000
Then we move straight again, and now the x coordinate becomes 0.3903,

80
00:05:44,000 --> 00:05:49,000
y coordinate becomes 7.12, orientation 0.28.

81
00:05:49,000 --> 00:05:53,000
So your code should output exactly the same values also over here.

82
00:05:53,000 --> 00:05:58,000
And just to give you a second test: so this is a sequence of 10 motions

83
00:05:58,000 --> 00:06:06,000
where the robot moves 10 forward and always turns right by an angle of 0.2 in radians.

84
00:06:06,000 --> 00:06:09,000
And we look at the outputs, then we get the following array.

85
00:06:09,000 --> 00:06:13,000
You can see that the orientation starting at zero, which is the same as 2π,

86
00:06:13,000 --> 00:06:17,000
decreases all the way to 5.26,

87
00:06:17,000 --> 00:06:20,000
and you can also see that the robot starts running in a circle

88
00:06:20,000 --> 00:06:25,000
whereas initially we add almost 10 to the x direction and almost nothing in the y direction.

89
00:06:25,000 --> 00:06:28,000
As you come down here, we subtract quite a bit in the y direction,

90
00:06:28,000 --> 00:06:31,000
because now the robot is going on a circle.

91
00:06:31,000 --> 00:06:34,000
So you should look at these numbers over here and see if your code matches

92
00:06:34,000 --> 00:06:38,000
these exact numbers that my code outputs.

