1
00:00:00,000 --> 00:00:03,000
So now, our final programming exercise,

2
00:00:03,000 --> 00:00:07,000
I want you to put everything together and build a particle filter.

3
00:00:07,000 --> 00:00:10,000
And I'm supplying you with code that has as gaps

4
00:00:10,000 --> 00:00:14,000
pretty much the 2 functions you just programmed, move and sense,

5
00:00:14,000 --> 00:00:17,000
and some additional code that I copied from class,

6
00:00:17,000 --> 00:00:20,000
the particle filter code that you're familiar with and also some code

7
00:00:20,000 --> 00:00:24,000
that helps you test your routines so you can make sure they're correct.

8
00:00:24,000 --> 00:00:28,000
The key new thing you have to do is you have to work in the noise.

9
00:00:28,000 --> 00:00:31,000
There is now bearing noise and steering noise and distance noise.

10
00:00:31,000 --> 00:00:34,000
The code that you wrote didn't have any of those.

11
00:00:34,000 --> 00:00:37,000
I want you now to modify your procedures to accommodate this noise,

12
00:00:37,000 --> 00:00:40,000
steering noise, distance noise, and bearing noise,

13
00:00:40,000 --> 00:00:43,000
and all of it should be Gaussian.

14
00:00:43,000 --> 00:00:46,000
So let's go all the way to the end. There are 2 test cases.

15
00:00:46,000 --> 00:00:49,000
The first test case, which are uncommented so we can run it.

16
00:00:49,000 --> 00:00:52,000
What this is is it creates a sequence of robot motions.

17
00:00:52,000 --> 00:00:55,000
At each of these time steps the robot turns a little bit and moves forward.

18
00:00:55,000 --> 00:01:02,000
And it also has 8 measurements, which are the bearings to the those 4 different landmarks.

19
00:01:02,000 --> 00:01:04,000
If I go up a little bit in the code,

20
00:01:04,000 --> 00:01:10,000
then you'll find that the ground truth final position was 93, 75, and 5.2.

21
00:01:10,000 --> 00:01:15,000
When I run it, it runs the routine particle_filter with those motions

22
00:01:15,000 --> 00:01:17,000
and those measurements as an input.

23
00:01:17,000 --> 00:01:23,000
And it produces an estimate, which is 94, 71, and 5.2,

24
00:01:23,000 --> 00:01:26,000
which isn't exactly the same as up here, but it's close.

25
00:01:26,000 --> 00:01:28,000
So this is a particle filter working.

26
00:01:28,000 --> 00:01:31,000
I'm supplying quite a few functions for you. You should look around.

27
00:01:31,000 --> 00:01:33,000
One is called particle filters.

28
00:01:33,000 --> 00:01:36,000
That's exactly the same code we used in class and constructed together.

29
00:01:36,000 --> 00:01:42,000
I just copied it over, so if you look through this you'll find, hopefully, no surprise here.

30
00:01:42,000 --> 00:01:46,000
And I'm also supplying you the measurement probability function, which is part of the implementation.

31
00:01:46,000 --> 00:01:48,000
Lets just go there.

32
00:01:48,000 --> 00:01:51,000
Here is the measurement probability function. There is something non-trivial here.

33
00:01:51,000 --> 00:01:54,000
I compute the predicted measurements,

34
00:01:54,000 --> 00:01:58,000
and then I compute a Gaussian that measures the distance between

35
00:01:58,000 --> 00:02:00,000
the measurements passed into the routine

36
00:02:00,000 --> 00:02:02,000
and the predicted measurements computer over here.

37
00:02:02,000 --> 00:02:07,000
That's all happening down here. Here's my Gaussian function with the exponential.

38
00:02:07,000 --> 00:02:10,000
And then I return my Gaussian error. There should be no surprise here.

39
00:02:10,000 --> 00:02:14,000
What's important is a little modification to the sense function that we haven't seen before.

40
00:02:14,000 --> 00:02:19,000
I can now give the sense function a parameter, and I give it the parameter 0.

41
00:02:19,000 --> 00:02:22,000
It switches off the noise model, so you will need the noise model

42
00:02:22,000 --> 00:02:25,000
for forward simulation of the robot,

43
00:02:25,000 --> 00:02:28,000
but you don't need it for computing the probability of the measurement.

44
00:02:28,000 --> 00:02:31,000
So augment your sense function to have a flag

45
00:02:31,000 --> 00:02:34,000
that if it's set to 0 it switches off the noise modeling

46
00:02:34,000 --> 00:02:38,000
and gets you the predicted best possible measurements.

47
00:02:38,000 --> 00:02:41,000
So what you have to do is you have to find the part in the code

48
00:02:41,000 --> 00:02:44,000
that says "only add/modify code below here."

49
00:02:44,000 --> 00:02:47,000
You have to copy over your move function and then work in,

50
00:02:47,000 --> 00:02:52,000
as it says in the instructions, the steering noise and the distance noise,

51
00:02:52,000 --> 00:02:55,000
that is Gaussian noise; I hope you know how to do this.

52
00:02:55,000 --> 00:02:58,000
Then you also have to plug in the sense function,

53
00:02:58,000 --> 00:03:01,000
and you also have to plug in bearing noise and make sure there's

54
00:03:01,000 --> 00:03:04,000
a flag that allows you to switch off the bearing noise.

55
00:03:04,000 --> 00:03:07,000
It should be an optional flag,

56
00:03:07,000 --> 00:03:10,000
so it has to have a default value of the bearing noise being on.

57
00:03:10,000 --> 00:03:13,000
Otherwise your code won't run.

58
00:03:13,000 --> 00:03:16,000
Here is how we will test your code.

59
00:03:16,000 --> 00:03:19,000
If you go to test case number 2,

60
00:03:19,000 --> 00:03:22,000
then I wrote a few extra functions for you that allow you to test your particle filters

61
00:03:22,000 --> 00:03:25,000
on many, many instances just like the ones we were using

62
00:03:25,000 --> 00:03:28,000
for testing that are all randomly generated.

63
00:03:28,000 --> 00:03:31,000
Let me just go through that code line-by-line.

64
00:03:31,000 --> 00:03:33,000
Our test case will be 8 steps long.

65
00:03:33,000 --> 00:03:38,000
There is the same motions vector we had before of a slight turn on the circle.

66
00:03:38,000 --> 00:03:44,000
"Generate_ground_truth" gives us a sequence of measurements and a robot position

67
00:03:44,000 --> 00:03:48,000
that we can split as follows, using a robot simulation.

68
00:03:48,000 --> 00:03:53,000
Then you run your particle filter over here, and the function

69
00:03:53,000 --> 00:03:58,000
"check_output" down here compares the final robot position, the ground truth position,

70
00:03:58,000 --> 00:04:01,000
with your particle filter position, estimated position, from here

71
00:04:01,000 --> 00:04:06,000
and gives us a single flag whether this is all correct. So let me just do this.

72
00:04:06,000 --> 00:04:13,000
We generated a robot that finished with final location 20, -29, and this orientation over here.

73
00:04:13,000 --> 00:04:20,000
The particle filter came up with 22, -31, and 0.14, which is close to the originals.

74
00:04:20,000 --> 00:04:24,000
And my code check said "True." Let me run it again.

75
00:04:24,000 --> 00:04:32,000
Different values, still true. Run it again. Different values, still true.

76
00:04:32,000 --> 00:04:35,000
Now, it could happen that the code check says "False."

77
00:04:35,000 --> 00:04:38,000
I just ran it 20 times, and it said true for me every single time.

78
00:04:38,000 --> 00:04:40,000
But I've seen it say "False."

79
00:04:40,000 --> 00:04:43,000
And the reason is it's a randomized algorithm. It's a particle filter.

80
00:04:43,000 --> 00:04:46,000
It might actually not have a particle at the right place.

81
00:04:46,000 --> 00:04:49,000
So when we test your routine, we're going to code our own code check, check_output.

82
00:04:49,000 --> 00:04:53,000
We have our own function for this, but we're going to run it multiple times.

83
00:04:53,000 --> 00:04:56,000
And if you get it wrong once it's not a big deal.

84
00:04:56,000 --> 00:05:01,000
So in summary, you will have comment out all the test cases again.

85
00:05:01,000 --> 00:05:05,000
All you have to do is supply the missing function. You can test the correctness yourself.

86
00:05:05,000 --> 00:05:08,000
You can basically grade yourself with this test case over here,

87
00:05:08,000 --> 00:05:10,000
but when you submit it, have those commented out,

88
00:05:10,000 --> 00:05:13,000
because we have our own test software.

89
00:05:13,000 --> 00:05:16,000
And all we're going to test is whether your particle filter gives us a good estimate

90
00:05:16,000 --> 00:05:20,000
when we choose randomly the initial position

91
00:05:20,000 --> 00:05:24,000
of the robot, measurements, motions, and so on.

