1
00:00:00,000 --> 00:00:03,000
Let's now come to our programming exercise.

2
00:00:03,000 --> 00:00:08,000
And I want you to program exactly what we just talked about.

3
00:00:08,000 --> 00:00:11,000
We're given a two-dimensional world

4
00:00:11,000 --> 00:00:18,000
where we observe in 2D measurements of a moving object

5
00:00:18,000 --> 00:00:21,000
with an unknown but fixed velocity.

6
00:00:21,000 --> 00:00:27,000
And using a state vector of this type, I'd like you to implement the Kalman filter.

7
00:00:27,000 --> 00:00:30,000
Now, this Kalman filter now has 4 state variables

8
00:00:30,000 --> 00:00:33,000
whereas the one we used before has 2 state variables.

9
00:00:33,000 --> 00:00:36,000
I will give you the entire code for the Kalman filter,

10
00:00:36,000 --> 00:00:52,000
but I want you to set up the state vector x, the motion u, P, F, H, R, and I,

11
00:00:52,000 --> 00:00:57,000
which are all those variables that define the Kalman filter.

12
00:00:57,000 --> 00:01:01,000
Start with the assignment that we had in 2D

13
00:01:01,000 --> 00:01:05,000
and make it work in 4D.

14
00:01:05,000 --> 00:01:10,000
So here is exactly the same matrix class that I wrote you before.

15
00:01:10,000 --> 00:01:14,000
Here is the Kalman filter procedure.

16
00:01:14,000 --> 00:01:18,000
We'll go through our measurements and apply the Kalman filter equations.

17
00:01:18,000 --> 00:01:21,000
I should point out there's a slight difference to the code I gave you previously

18
00:01:21,000 --> 00:01:24,000
where I inserted Z.transpose().

19
00:01:24,000 --> 00:01:29,000
It makes it a little bit easier to work with multidimensional measurements than the way I had it before.

20
00:01:29,000 --> 00:01:33,000
But you don't have to pay attention to this. It's just fixed. There was a kind of a bug before.

21
00:01:33,000 --> 00:01:40,000
And as I scroll down, the output of the Kalman filter routine will be an x and a P.

22
00:01:40,000 --> 00:01:43,000
In our example, the measurements will be a sequence of measurements

23
00:01:43,000 --> 00:01:46,000
in two-dimensional spaces now, in x and y.

24
00:01:46,000 --> 00:01:49,000
Look at the x's 5, 6, 7, 8, 9, 10.

25
00:01:49,000 --> 00:01:53,000
The y's go 10, 8, 6, 4, 2.

26
00:01:53,000 --> 00:01:56,000
You can imagine what the regularity is and what the velocity is.

27
00:01:56,000 --> 00:02:00,000
We assume a dt of 0.1.

28
00:02:00,000 --> 00:02:04,000
That means when it goes from 5 to 6 the velocity is actually 10, not 1.

29
00:02:04,000 --> 00:02:09,000
We won't tell the system, but we will tell the system our initial x,y location, which is 4.

30
00:02:09,000 --> 00:02:16,000
That goes nicely into 5, 6, 7, and it's 12. That blends nicely into 10, 8, and 6.

31
00:02:16,000 --> 00:02:20,000
Our initial state vector I have already given you, which is the initial x and y.

32
00:02:20,000 --> 00:02:24,000
and 0, 0 for the two unknown velocities.

33
00:02:24,000 --> 00:02:29,000
And the motion vector, just for completeness, will just be [0, 0, 0, 0].

34
00:02:29,000 --> 00:02:31,000
We have no external motion.

35
00:02:31,000 --> 00:02:35,000
That's a bit confusing, because there is actually motion in the system itself,

36
00:02:35,000 --> 00:02:38,000
but this will be more like an external change of the motion

37
00:02:38,000 --> 00:02:41,000
as if someone hit the object with an external force.

38
00:02:41,000 --> 00:02:43,000
So it's [0, 0, 0, 0]; please don't change it.

39
00:02:43,000 --> 00:02:46,000
P is the initial uncertainty,

40
00:02:46,000 --> 00:02:51,000
and I want you to initialize it so that the uncertainty for the x,y coordinates is 0,

41
00:02:51,000 --> 00:02:56,000
but the covariance term for the velocities is 1000,

42
00:02:56,000 --> 00:02:59,000
indicating that we really don't know the initial velocity.

43
00:02:59,000 --> 00:03:01,000
We just know the initial position.

44
00:03:01,000 --> 00:03:04,000
I want you to plug in the F matrix.

45
00:03:04,000 --> 00:03:07,000
I want you to design an H matrix that's a projection matrix

46
00:03:07,000 --> 00:03:10,000
from 4-dimensional state space to 2 dimensions,

47
00:03:10,000 --> 00:03:14,000
reflecting the fact that we can only observe the first two state variables, x and y,

48
00:03:14,000 --> 00:03:16,000
but not the velocities.

49
00:03:16,000 --> 00:03:20,000
I want you to define the measurement uncertainty matrix, which now is a 2 x 2

50
00:03:20,000 --> 00:03:25,000
that has 0.1 as the main diagonal as measurement noise.

51
00:03:25,000 --> 00:03:27,000
And this is an identity matrix over here.

52
00:03:27,000 --> 00:03:33,000
Once you design all those, you should get the following output.

53
00:03:33,000 --> 00:03:36,000
So when I run this, I get as an output

54
00:03:36,000 --> 00:03:42,000
for my 4-dimensional example the x coordinates 10 and 0.

55
00:03:42,000 --> 00:03:46,000
And this makes sense given that these sequences over here

56
00:03:46,000 --> 00:03:55,000
had as a final measurement 10 and 0; 5, 6, 7, 8, 9, 10;  10, 8, 6, 4, 2, 0.

57
00:03:55,000 --> 00:04:00,000
The interesting thing that I want your program to produce is the velocities.

58
00:04:00,000 --> 00:04:06,000
They are approximately 10, which makes sense given a delta-t of 0.1

59
00:04:06,000 --> 00:04:12,000
gives us per time step a 10 divided by 10 equals 1 increment over here.

60
00:04:12,000 --> 00:04:17,000
And the second velocity is -20 multiplied by 0.1 gives us a -2.

61
00:04:17,000 --> 00:04:21,000
And you can see it over here - 10, 8, 6, 4, and 2.

62
00:04:21,000 --> 00:04:25,000
I also want you to output the covariance matrix,

63
00:04:25,000 --> 00:04:29,000
which has certain of elements that are still 0, like these guys over here.

64
00:04:29,000 --> 00:04:34,000
And we find that along the main diagonal our uncertainty has shrunk substantially.

65
00:04:34,000 --> 00:04:40,000
It's 0.03 for the coordinate estimates and 0.1 for the velocity estimates.

66
00:04:40,000 --> 00:04:44,000
Remember, this number over here was 1000 before.

67
00:04:44,000 --> 00:04:48,000
Here is a second example where we have an initial coordinate of -4 and 8.

68
00:04:48,000 --> 00:04:52,000
We can see the measurements 1, 6, 11, 16.

69
00:04:52,000 --> 00:04:55,000
It seems the increments are in x direction 5.

70
00:04:55,000 --> 00:05:00,000
In the y direction they are -4; 8, 4, 0, -4, -8.

71
00:05:00,000 --> 00:05:06,000
If I now run this, I get for my x vector approximately 16, the number over here,

72
00:05:06,000 --> 00:05:08,000
approximately -8, the number over here.

73
00:05:08,000 --> 00:05:13,000
And these are velocities, 50 and -40 in approximation,

74
00:05:13,000 --> 00:05:21,000
which multiplied with 0.1 is our plus 5 and our -4.

75
00:05:21,000 --> 00:05:25,000
Here is yet another example. Initial state 1 and 19.

76
00:05:25,000 --> 00:05:29,000
You can see the first coordinate doesn't change at all. You should get a velocity of 0.

77
00:05:29,000 --> 00:05:34,000
The second coordinate goes 19, 17, 15, 13, and 11.

78
00:05:34,000 --> 00:05:39,000
Running it gives us 1, unchanged, and 11.

79
00:05:39,000 --> 00:05:43,000
Velocities are 0 and -20 for the decrements of -2.

80
00:05:43,000 --> 00:05:50,000
And going into the covariance, we see values along the main diagonals,

81
00:05:50,000 --> 00:05:55,000
0.05, 0.05, 0.33, and 0.33 for the velocities.

82
00:05:55,000 --> 00:05:58,000
There are certain off-diagonal elements.

83
00:05:58,000 --> 00:06:03,000
Make sure those all match what your code produces.

84
00:06:03,000 --> 00:06:08,000
I can now change some of these measurements to make a noisy measurement.

85
00:06:08,000 --> 00:06:12,000
One way to do this is to set an oscillating measurement between 2 and 0.

86
00:06:12,000 --> 00:06:15,000
Remember that this Kalman filter assumes a fixed velocity.

87
00:06:15,000 --> 00:06:20,000
There is no way to explain these measurements with a fixed velocity,

88
00:06:20,000 --> 00:06:22,000
so there has to be measurement noise.

89
00:06:22,000 --> 00:06:24,000
So we can run the Kalman filter again.

90
00:06:24,000 --> 00:06:27,000
Your filter should output the following values:

91
00:06:27,000 --> 00:06:34,000
0.7 for the current state, 11 as before, and here are our two velocity estimates.

92
00:06:34,000 --> 00:06:38,000
It actually believes there is a slight velocity of -0.66

93
00:06:41,000 --> 00:06:42,000
in the x direction where we had noisy sensor input.

94
00:06:42,000 --> 00:06:45,000
The covariance matrix should look exactly as before,

95
00:06:45,000 --> 00:06:48,000
because it's not affected by the measurements themselves.

96
00:06:48,000 --> 00:06:53,000
So your job is to fill in these various matrices. Good luck!

