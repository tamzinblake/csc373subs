1
00:00:00,000 --> 00:00:04,000
The answer as it turns out will be just 0.2 everywhere,

2
00:00:04,000 --> 00:00:07,000
and the reason is with every grid cell being equally likely,

3
00:00:07,000 --> 00:00:11,000
applying this motion model will still made each grid cell equally likely.

4
00:00:11,000 --> 00:00:13,000
So let's pick one of them, say this one over here.

5
00:00:13,000 --> 00:00:16,000
We could have arrived here in 3 different ways.

6
00:00:16,000 --> 00:00:22,000
Perhaps we started in x2 and our motion went well.

7
00:00:22,000 --> 00:00:28,000
This gives us a 0.2 times a 0.8.

8
00:00:28,000 --> 00:00:31,000
Perhaps we started in x1 and we overshot,

9
00:00:31,000 --> 00:00:39,000
which gives us a 0.2, for the cell x1, times a 0.1 for overshooting.

10
00:00:39,000 --> 00:00:46,000
Or perhaps we started in x3 and we undershot, which gives us 0.2 times 0.1.

11
00:00:46,000 --> 00:00:51,000
And we add those up, and we find it is the same as 0.2 times 1,

12
00:00:51,000 --> 00:00:56,000
because the factors over here add up exactly to 1, which makes 0.2,

13
00:00:56,000 --> 00:00:59,000
and the result is 0.2.

14
00:00:59,000 --> 00:01:01,000
You can apply this same logic to all the other cells.

15
00:01:01,000 --> 00:01:05,000
This guy over here could have come from this guy, this guy, this guy,

16
00:01:05,000 --> 00:01:10,000
where this one is weighted with 0.8 and the other two with 0.1.

17
00:01:10,000 --> 00:01:12,000
That's called a convolution,

18
00:01:12,000 --> 00:01:15,000
and as we will see later, there's a very nice way to write this mathematically

19
00:01:15,000 --> 00:01:18,000
as something called Theorem of Total Probability.

20
00:01:18,000 --> 00:01:21,000
But for the time being, I'd like to program this in.

