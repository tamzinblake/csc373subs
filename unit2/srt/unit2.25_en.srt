1
00:00:00,000 --> 00:00:02,000
So now let's put everything together.

2
00:00:02,000 --> 00:00:08,000
Let's write a main program that takes these 2 functions, update and predict,

3
00:00:08,000 --> 00:00:12,000
and feeds into a sequence of measurements and motions.

4
00:00:12,000 --> 00:00:17,000
In the example I've chosen here are the measurements of 5., 6., 7., 9., and 10.

5
00:00:17,000 --> 00:00:21,000
The motions are 1., 1., 2., 1., 1.

6
00:00:21,000 --> 00:00:25,000
This all would work out really well if the initial estimate was 5,

7
00:00:25,000 --> 00:00:31,000
but we're setting it to 0 with a very large uncertainty of 10,000.

8
00:00:31,000 --> 00:00:33,000
Let's assume the measurement uncertainty is constant 4,

9
00:00:33,000 --> 00:00:36,000
and the motion uncertainty is constant 2.

10
00:00:36,000 --> 00:00:41,000
And when you run this, your first estimate for position should basically become 5,

11
00:00:41,000 --> 00:00:46,000
4.99, and the reason is your initial uncertainty is so large,

12
00:00:46,000 --> 00:00:49,000
the estimate is dominated by the first measurement.

13
00:00:49,000 --> 00:00:52,000
Your uncertainty shrinks to 3.99, which is slightly better than

14
00:00:52,000 --> 00:00:54,000
the measurement uncertainty.

15
00:00:54,000 --> 00:01:00,000
You then predict that you add 1, but the uncertainty increases to 5.99,

16
00:01:00,000 --> 00:01:02,000
which is the motion uncertainty of 2.

17
00:01:02,000 --> 00:01:07,000
You update again based on the measurement 6, you get your estimate of 5.99,

18
00:01:07,000 --> 00:01:08,000
which is almost 6.

19
00:01:08,000 --> 00:01:15,000
You move 1 again. You measure 7. You move 2. You measure 9. You move 1.

20
00:01:15,000 --> 00:01:17,000
You measure 10, and you move a final 1.

21
00:01:17,000 --> 00:01:22,000
And out comes as the final result, a prediction of 10.99 for the position,

22
00:01:22,000 --> 00:01:25,000
which is your 10 position moved by 1,

23
00:01:25,000 --> 00:01:30,000
and the uncertainty, residual uncertainty, of 4.

24
00:01:30,000 --> 00:01:34,000
Can you implement this so you get the exactly same outputs as I've gotten over here?

