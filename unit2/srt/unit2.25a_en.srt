1
00:00:00,000 --> 00:00:05,000
So this piece of code implements the entire Kalman filter.

2
00:00:05,000 --> 00:00:08,000
It goes through all the measurement elements and quietly assumes there's

3
00:00:08,000 --> 00:00:11,000
as many measurements as motions indexed by n.

4
00:00:11,000 --> 00:00:16,000
It updates the mu and sigma using this recursive formula over here.

5
00:00:16,000 --> 00:00:19,000
If we plug in the nth measurement and the measurement uncertainty,

6
00:00:19,000 --> 00:00:22,000
it does the same with the motion, the prediction part over here.

7
00:00:22,000 --> 00:00:26,000
It updates the mu and sigma recursively using the nth motion

8
00:00:26,000 --> 00:00:30,000
and the motion uncertainty, and it prints all of those out.

9
00:00:30,000 --> 00:00:34,000
So if I hit the Run button, I find that my first measurement update

10
00:00:34,000 --> 00:00:37,000
gets me effectively 5.0.

11
00:00:37,000 --> 00:00:39,000
It's 4.98.

12
00:00:39,000 --> 00:00:42,000
And that makes sense because we had a huge initial uncertainty,

13
00:00:42,000 --> 00:00:46,000
and a Res.sub of 5 with a relatively small measurement uncertainty.

14
00:00:46,000 --> 00:00:50,000
And in fact the resulting sigma square term is 3.98,

15
00:00:50,000 --> 00:00:53,000
which is better than 4 and 1,000, slightly better than 4.

16
00:00:53,000 --> 00:00:56,000
So we're slightly more certain than the measurement itself.

17
00:00:56,000 --> 00:00:58,000
We now apply the motion of 1.

18
00:00:58,000 --> 00:01:00,000
We get to 5.9.

19
00:01:00,000 --> 00:01:04,000
Our uncertainty increases by exactly 2, from 3.9 to 5.98.

20
00:01:04,000 --> 00:01:07,000
And then the next update comes in at 6,

21
00:01:07,000 --> 00:01:09,000
and it gives us a measurement of 5.99

22
00:01:09,000 --> 00:01:13,000
and now a reduced uncertainty of 2.39.

23
00:01:13,000 --> 00:01:16,000
And then we go to move to the right again by 1,

24
00:01:16,000 --> 00:01:19,000
which makes the prediction 6.99.

25
00:01:19,000 --> 00:01:21,000
Uncertainty goes up.

26
00:01:21,000 --> 00:01:24,000
We measure 7. We get to 6.99, almost 7.

27
00:01:24,000 --> 00:01:26,000
Uncertainty goes down.

28
00:01:26,000 --> 00:01:29,000
We move 2 to the right, measure 9, 1 to the right,

29
00:01:29,000 --> 00:01:31,000
measure 10, and move 1 again.

30
00:01:31,000 --> 00:01:33,000
The final thing is the motion.

31
00:01:33,000 --> 00:01:36,000
And if you look at the end result, our estimate is almost exactly 11,

32
00:01:36,000 --> 00:01:40,000
which is the result of 10 + 1.

33
00:01:40,000 --> 00:01:43,000
And the uncertainty is 4.0 after the motion

34
00:01:43,000 --> 00:01:46,000
and 2.0 after the measurement.

35
00:01:46,000 --> 00:01:48,000
This code that you just wrote

36
00:01:48,000 --> 00:01:52,000
implements a full Kalman filter for 1D.

37
00:01:52,000 --> 00:01:54,000
So if you look at this,

38
00:01:54,000 --> 00:01:56,000
we have an update function that implements

39
00:01:56,000 --> 00:02:00,000
what actually is a relatively simple equation,

40
00:02:00,000 --> 00:02:02,000
and a prediction function which is an even simpler equation

41
00:02:02,000 --> 00:02:04,000
of just addition.

42
00:02:04,000 --> 00:02:07,000
And then we apply it to a measurement sequence and a motion sequence

43
00:02:07,000 --> 00:02:09,000
with certain uncertainties associated,

44
00:02:09,000 --> 00:02:12,000
and this little piece of code over here

45
00:02:12,000 --> 00:02:14,000
gives you a full Kalman filter in 1D.

46
00:02:14,000 --> 00:02:17,000
I find this really amazing.

47
00:02:17,000 --> 00:02:19,000
So let's plug in some other values.

48
00:02:19,000 --> 00:02:22,000
Suppose you're really certain about the initial position.

49
00:02:22,000 --> 00:02:24,000
It's wrong. It's 0.

50
00:02:24,000 --> 00:02:26,000
It should be 5, but it's 0.

51
00:02:26,000 --> 00:02:28,000
And now we assume a really small uncertainty.

52
00:02:28,000 --> 00:02:31,000
Guess what's going to happen to the final prediction?

53
00:02:31,000 --> 00:02:33,000
As I hit the Run button,

54
00:02:33,000 --> 00:02:35,000
we find this has an effect on the final estimate.

55
00:02:35,000 --> 00:02:38,000
It's not 11. It's only 10.5.

56
00:02:38,000 --> 00:02:42,000
And the way this takes place is initially,

57
00:02:42,000 --> 00:02:46,000
after our first measurement update, we believe in the position of 0.

58
00:02:46,000 --> 00:02:49,000
This is 1.24 to the - 10th,

59
00:02:49,000 --> 00:02:52,000
but a really small uncertainty, even smaller than this one over here.

60
00:02:52,000 --> 00:02:55,000
We apply our motion update. We add a 1.

61
00:02:55,000 --> 00:02:57,000
We have a higher uncertainty.

62
00:02:57,000 --> 00:02:59,000
And now when the next measurement comes in, 6,

63
00:02:59,000 --> 00:03:01,000
we are now more inclined to believe the measurement

64
00:03:01,000 --> 00:03:06,000
because uncertainty is now basically 2 as opposed to 0.001.

65
00:03:06,000 --> 00:03:10,000
So we update our position to be 2.666,

66
00:03:10,000 --> 00:03:13,000
which is now a jump away from 1, and we reduce our uncertainty.

67
00:03:13,000 --> 00:03:15,000
Motion comes in, 3.66.

68
00:03:15,000 --> 00:03:17,000
Uncertainty goes up.

69
00:03:17,000 --> 00:03:19,000
We now are willing to update even more.

70
00:03:19,000 --> 00:03:21,000
As we see the 7, we're willing to go to 5.1,

71
00:03:21,000 --> 00:03:26,000
but not quite all the way because we feel fairly confident on our wrong prior estimate.

72
00:03:26,000 --> 00:03:29,000
And this confidence makes it all the way to the end

73
00:03:29,000 --> 00:03:33,000
when we predict 10.5 as opposed to 11

74
00:03:33,000 --> 00:03:36,000
with a residual uncertainty of 3.98.

75
00:03:36,000 --> 00:03:38,000
So we've corrected some of it.

76
00:03:38,000 --> 00:03:41,000
We were able to drag it into the right direction but not all the way

77
00:03:41,000 --> 00:03:44,000
because our false initial belief has such a strong weight

78
00:03:44,000 --> 00:03:47,000
in the overall equation.

