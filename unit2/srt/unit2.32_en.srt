1
00:00:00,000 --> 00:00:08,000
So, I have a new, a challenging programming assignment for you that will kind of take you a while,

2
00:00:08,000 --> 00:00:13,000
but I would like you to implement a multidimensional Kalman filter for the example

3
00:00:13,000 --> 00:00:15,000
I've just given you.

4
00:00:15,000 --> 00:00:20,000
The matrix class is a class for manipulating matrices that should make it really easy.

5
00:00:20,000 --> 00:00:28,000
It has a function that initializes matrices.  I'll show you an example in a second.

6
00:00:28,000 --> 00:00:34,000
It can set them down to 0.

7
00:00:34,000 --> 00:00:36,000
It can compute an identity matrix.

8
00:00:36,000 --> 00:00:38,000
It can print out a matrix with show.

9
00:00:38,000 --> 00:00:41,000
It overloads operators like addition, subtraction,

10
00:00:41,000 --> 00:00:46,000
multiplication, and even computes the transpose of a matrix,

11
00:00:46,000 --> 00:00:52,000
and in some more extended code, it can actually invert a matrix

12
00:00:52,000 --> 00:00:55,000
using Cholesky factorization.

13
00:00:55,000 --> 00:00:58,000
So there's a function here called inverse.

14
00:00:58,000 --> 00:01:00,000
So this matrix class is available.

15
00:01:00,000 --> 00:01:03,000
It's a small version of what is found in typical libraries.

16
00:01:03,000 --> 00:01:06,000
And I want to demonstrate it for you just for a second.

17
00:01:07,000 --> 00:01:10,000
You can make a matrix with a command like this with the argument in the parenthesis.

18
00:01:10,000 --> 00:01:15,000
It's a 2-dimensional matrix.

19
00:01:15,000 --> 00:01:17,000
In this case it's a vertical vector.

20
00:01:17,000 --> 00:01:19,000
And with the show command, you can print out the result of the vertical vector.

21
00:01:19,000 --> 00:01:24,000
You can compute the transpose as follows.

22
00:01:24,000 --> 00:01:27,000
If you run this, you'll find the horizontal vector.

23
00:01:27,000 --> 00:01:31,000
And say you wish to multiply a matrix by a vector,

24
00:01:31,000 --> 00:01:34,000
then we can make a 2 x 2 matrix with this initialization over here,

25
00:01:34,000 --> 00:01:38,000
a matrix of [12., 8.] and [6., 2.].

26
00:01:38,000 --> 00:01:41,000
We can print this matrix.

27
00:01:41,000 --> 00:01:43,000
Here it is: [12, 8, 6, 2].

28
00:01:43,000 --> 00:01:45,000
These are these values over here.

29
00:01:45,000 --> 00:01:47,000
And we can multiply F and a.

30
00:01:47,000 --> 00:01:50,000
So here b = F * a.

31
00:01:50,000 --> 00:01:54,000
And if we show the result, we get the vector 280.

32
00:01:54,000 --> 00:01:58,000
That's obtained by 10 * 12 + 10 * 8 is 200.

33
00:01:58,000 --> 00:02:02,000
10 * 6 + 10 * 2 is 80.

34
00:02:02,000 --> 00:02:09,000
So using my matrix libraries, I set an initial state.

35
00:02:09,000 --> 00:02:13,000
This is a tracking in 1D where the state is the position

36
00:02:13,000 --> 00:02:18,000
and the velocity.

37
00:02:18,000 --> 00:02:20,000
I initialized both with 0 because I don't know the actual location and the velocity.

38
00:02:20,000 --> 00:02:24,000
I give an uncertainty matrix

39
00:02:24,000 --> 00:02:27,000
where I have a really high uncertainty in the position

40
00:02:27,000 --> 00:02:30,000
and a really high uncertainty in the velocity,

41
00:02:30,000 --> 00:02:33,000
and they're both uncorrelated.

42
00:02:33,000 --> 00:02:36,000
That's the matrix of 1000, 0, 0, 1000.

43
00:02:36,000 --> 00:02:38,000
I specify an external motion, but it's 0, 0, so it has no effect,

44
00:02:38,000 --> 00:02:42,000
so just ignore this.

45
00:02:42,000 --> 00:02:44,000
I build the next state function, which is the one we just

46
00:02:44,000 --> 00:02:47,000
discussed, [[1., 1] [0, 1.]].

47
00:02:47,000 --> 00:02:49,000
That assumes that the velocity is just being added to the position,

48
00:02:49,000 --> 00:02:54,000
and the velocity in expectation stays the same.

49
00:02:54,000 --> 00:02:57,000
I build a measurement function that extracts just the first

50
00:02:57,000 --> 00:03:00,000
of the 2 values, 1 and 0,

51
00:03:00,000 --> 00:03:02,000
so I can observe the location but not the velocity.

52
00:03:02,000 --> 00:03:05,000
I have a measurement uncertainty.

53
00:03:05,000 --> 00:03:07,000
It happens to be 1 in this example.

54
00:03:07,000 --> 00:03:09,000
And I have an identity matrix, [[1., 0.] [0., 1.]].

55
00:03:09,000 --> 00:03:13,000
And then I run a filter with these 3 measurements over here,

56
00:03:13,000 --> 00:03:16,000
and what should come out is that by running the filter,

57
00:03:16,000 --> 00:03:19,000
I can estimate the velocity

58
00:03:19,000 --> 00:03:22,000
and therefore make better predictions.

59
00:03:22,000 --> 00:03:25,000
In the filter that I want you to program,

60
00:03:25,000 --> 00:03:28,000
I want the measurement update first and then the motion update.

61
00:03:28,000 --> 00:03:32,000
So every time we run the filter,

62
00:03:32,000 --> 00:03:35,000
I want you to update the measurement first, then the motion.

63
00:03:35,000 --> 00:03:40,000
So here is my empty procedure filter that you have to fill in

64
00:03:40,000 --> 00:03:44,000
where I go through all measurements,

65
00:03:44,000 --> 00:03:46,000
and then build the measurement update and then the motion update,

66
00:03:46,000 --> 00:03:49,000
the prediction, and then I just print out the resulting estimates.

67
00:03:49,000 --> 00:03:53,000
I do this a number of times, 3 times in this case.

68
00:03:53,000 --> 00:03:56,000
Once you fill this in and I hit the Run button,

69
00:03:56,000 --> 00:03:59,000
I get the following output.

70
00:03:59,000 --> 00:04:01,000
After my first measurement update,

71
00:04:01,000 --> 00:04:04,000
I observed the location 1, which gets copied over

72
00:04:04,000 --> 00:04:08,000
essentially to 0.999 over here.

73
00:04:08,000 --> 00:04:12,000
I learn nothing about the velocity, so it's still 0, just the way I initialized it.

74
00:04:12,000 --> 00:04:16,000
And then there's an updated uncertainty matrix

75
00:04:16,000 --> 00:04:20,000
which now shows what happens to be a strong correlation,

76
00:04:20,000 --> 00:04:24,000
1000, 1000, 1000, 1000.

77
00:04:24,000 --> 00:04:26,000
That differs from the initial one only that we filled in

78
00:04:26,000 --> 00:04:29,000
the off-diagonal elements.

79
00:04:29,000 --> 00:04:31,000
It happens to be exactly what the Kalman filter does.

80
00:04:31,000 --> 00:04:34,000
And then I'm gonna observe again the 2.

81
00:04:34,000 --> 00:04:36,000
I want the output to now tell me that my next prediction is 3.

82
00:04:36,000 --> 00:04:41,000
It's the observation plus the prediction.

83
00:04:41,000 --> 00:04:43,000
But now I have a really good estimate

84
00:04:43,000 --> 00:04:46,000
on what the velocity is.

85
00:04:46,000 --> 00:04:48,000
It's essentially 1, and the reason is

86
00:04:48,000 --> 00:04:52,000
my Kalman filter was able to use

87
00:04:52,000 --> 00:04:54,000
the Kalman filter equations to find this value.

88
00:04:54,000 --> 00:04:58,000
There's a new covariance matrix,

89
00:04:58,000 --> 00:05:01,000
and for the third observation followed by the prediction,

90
00:05:01,000 --> 00:05:05,000
the prediction is correctly effectively 4, 3.999.

91
00:05:05,000 --> 00:05:09,000
The velocity estimate is correctly 1, which is 0.99999,

92
00:05:09,000 --> 00:05:14,000
and I have yet another uncertainty matrix which illustrates

93
00:05:14,000 --> 00:05:17,000
that I have high certainty in the velocity estimate,

94
00:05:17,000 --> 00:05:20,000
and also a relatively high certainty in the position estimate

95
00:05:20,000 --> 00:05:23,000
compared to my initial uncertainties.

96
00:05:23,000 --> 00:05:25,000
So can you write the algorithm filter

97
00:05:25,000 --> 00:05:27,000
that outputs those exact values over here?

98
00:05:27,000 --> 00:05:32,000
This is an involved programming assignment.

99
00:05:32,000 --> 00:05:34,000
What you have to do is you have to essentially

100
00:05:34,000 --> 00:05:37,000
implement the equations I gave you.

101
00:05:37,000 --> 00:05:39,000
You have to familiarize yourself with the matrix class

102
00:05:39,000 --> 00:05:42,000
and then go and fill in the filter code

103
00:05:42,000 --> 00:05:46,000
in accordance to the things that I showed you

104
00:05:46,000 --> 00:05:49,000
for the multivariate Kalman filter.

