1
00:00:00,000 --> 00:00:04,000
So here's my solution.  I defined a function "search",

2
00:00:04,000 --> 00:00:07,000
which is the only function I'm going to run in the end. It's like the main routine.

3
00:00:07,000 --> 00:00:12,000
To check cells once they're expanded so we don't expand them again,

4
00:00:12,000 --> 00:00:18,000
I define an array called "closed".  So it's the same size as my grid,

5
00:00:18,000 --> 00:00:23,000
and it has two values, 0 1: 0 being it's still open, 1 meaning it's been closed.

6
00:00:23,000 --> 00:00:25,000
You could also use Booleans.

7
00:00:25,000 --> 00:00:31,000
So this over here assigns an array of the same size as the field grid.

8
00:00:31,000 --> 00:00:36,000
I initialize the starting location as checked

9
00:00:36,000 --> 00:00:42,000
and assign the coordinates to x, y, and a g-value of 0.

10
00:00:42,000 --> 00:00:47,000
And my initial open list is going to be just 1 element of my initial coordinates and the g value of 0.

11
00:00:47,000 --> 00:00:52,000
So far what I've done is I've defined an array called closed of the same size.

12
00:00:52,000 --> 00:00:55,000
All the check marks are not there except for the ones in the left corner,

13
00:00:55,000 --> 00:01:01,000
and this is my starting location in my open list right over here with a g-value of 0.

14
00:01:01,000 --> 00:01:04,000
Inside my code I use two flags.  One is found,

15
00:01:04,000 --> 00:01:07,000
which will be true when the goal position is found, and one is resign,

16
00:01:07,000 --> 00:01:11,000
which will be true if I don't find a goal position and I've explored everything.

17
00:01:11,000 --> 00:01:15,000
The second one will be the case when my open list just turns empty without finding the goal.

18
00:01:15,000 --> 00:01:19,000
And that's really important for the case where I can't find a path to the goal.

19
00:01:19,000 --> 00:01:23,000
Those print commands were the ones I used for debugging.

20
00:01:23,000 --> 00:01:26,000
You can look at them. They print out the existing open list. Nothing else.

21
00:01:26,000 --> 00:01:28,000
But here is the code.

22
00:01:28,000 --> 00:01:32,000
I repeat the following while I haven't found a path to the goal

23
00:01:32,000 --> 00:01:35,000
and I haven't proved that the problem is unsolvable.

24
00:01:35,000 --> 00:01:38,000
So both found and resign are false.

25
00:01:38,000 --> 00:01:45,000
If my open list is empty, there's nothing to expand, then resign is true, and I print "fail".

26
00:01:45,000 --> 00:01:47,000
So this is one of the 2 terminating conditions.

27
00:01:47,000 --> 00:01:51,000
You can convince yourself there's no path from S to G.

28
00:01:51,000 --> 00:01:54,000
You'll expand every node on the left side

29
00:01:54,000 --> 00:01:58,000
of the barrier until we finally run out of nodes to expand,

30
00:01:58,000 --> 00:02:02,000
at which point the open list will be empty, and our search failed.

31
00:02:02,000 --> 00:02:06,000
If there is still elements in the open list, the else case comes into place.

32
00:02:06,000 --> 00:02:13,000
And here is how I remove the element with the smallest g-value.

33
00:02:13,000 --> 00:02:18,000
I use the list.sort function, which sorts elements in increasing order

34
00:02:18,000 --> 00:02:20,000
from the smallest g-value up.

35
00:02:20,000 --> 00:02:23,000
And now I want to pop the element with the smallest number.

36
00:02:23,000 --> 00:02:27,000
Unfortunately pop pops at the end, so I'll just reverse the list

37
00:02:27,000 --> 00:02:32,000
and then pop the element with the smallest g-value from that list.

38
00:02:32,000 --> 00:02:35,000
There's a little bit of a trick here. It's not very elegant.

39
00:02:35,000 --> 00:02:38,000
It's also not very efficient, but it does the job for now.

40
00:02:38,000 --> 00:02:42,000
That here gets me the element with the smallest g-value.

41
00:02:42,000 --> 00:02:46,000
And for that it's important that the g-value comes first in each of the triplets.

42
00:02:46,000 --> 00:02:49,000
That's why I put it first, before the x and the y.

43
00:02:49,000 --> 00:02:56,000
I then assign the 3 values to x, y, and g, which is my expansion.

44
00:02:56,000 --> 00:03:01,000
Again, g is the first, x and y are the second and third.

45
00:03:01,000 --> 00:03:04,000
And now I'm in the position to test whether I reach the goal.

46
00:03:04,000 --> 00:03:08,000
If x is the goal 0 and y is the goal 1, I'm done. I call found equals True.

47
00:03:08,000 --> 00:03:11,000
I print out this triplet, and that gives me the triplet over here.

48
00:03:11,000 --> 00:03:15,000
So this "print next" over here is this triplet and that's the one I was looking for,

49
00:03:15,000 --> 00:03:19,000
asking you about printing exactly this solution over here.

50
00:03:19,000 --> 00:03:22,000
Now, if I'm not done yet, then here's the interesting case.

51
00:03:22,000 --> 00:03:24,000
And that's the meat of what I'm programming.

52
00:03:24,000 --> 00:03:27,000
I'm going through all the possible actions. There's 4 of them.

53
00:03:27,000 --> 00:03:29,000
Delta is an array of 4 different actions.

54
00:03:29,000 --> 00:03:33,000
I apply the action to x and y with this addition over here

55
00:03:33,000 --> 00:03:37,000
by applying the corresponding delta vector to construct x2 and y2.

56
00:03:37,000 --> 00:03:48,000
If x2 falls into the grid and y2 falls into the grid and [x2, y2] is not yet checked,

57
00:03:48,000 --> 00:03:51,000
which is tested by this field called "closed,"

58
00:03:51,000 --> 00:03:55,000
and the grid cell is navigable; there is no obstacle here.

59
00:03:55,000 --> 00:04:00,000
If all these things are correct, then I found an expansion that I now add to the open list.

60
00:04:00,000 --> 00:04:07,000
I increment the cost from g to g2 by adding 1 in this case; cost is 1.

61
00:04:07,000 --> 00:04:11,000
Then I append the new [g2, x2, y2] to my open list,

62
00:04:11,000 --> 00:04:15,000
and I check the coordinate [x2, y2] so I never expand it again.

63
00:04:15,000 --> 00:04:18,000
That is the recursion.

64
00:04:18,000 --> 00:04:23,000
Put differently, when I drew down this element over here, for example,

65
00:04:23,000 --> 00:04:27,000
I looked at possible ways the robot could move.

66
00:04:27,000 --> 00:04:30,000
In my software, this means the robot has to stay inside the grid,

67
00:04:30,000 --> 00:04:34,000
and the grid cell has to be unoccupied, which is this test over here.

68
00:04:34,000 --> 00:04:37,000
I also checked whether there was already a check mark by the cell,

69
00:04:37,000 --> 00:04:41,000
which is this test over here. And if this while was true,

70
00:04:41,000 --> 00:04:45,000
I added the new element to my open list

71
00:04:45,000 --> 00:04:50,000
with the new g-value incremented and the new coordinates.

72
00:04:50,000 --> 00:04:52,000
And that is exactly happening over here.

73
00:04:52,000 --> 00:04:56,000
I increment the g-value, and I add it with the new coordinates.

74
00:04:56,000 --> 00:04:58,000
This is the key of a search algorithm.

75
00:04:58,000 --> 00:05:01,000
The only remaining thing now is that I call the search routine

76
00:05:01,000 --> 00:05:05,000
that prints me out this thing over here.

